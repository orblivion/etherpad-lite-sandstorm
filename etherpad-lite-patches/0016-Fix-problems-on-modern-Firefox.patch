From 047e5c5427da21b3fd280dd5b96446b3d7ceba82 Mon Sep 17 00:00:00 2001
From: Daniel Krol <orblivion@gmail.com>
Date: Thu, 20 Jan 2022 12:44:20 -0500
Subject: [PATCH 16/20] Fix problems on modern Firefox

I don't understand what the problem is, so I am selectively undoing the commit that introduced the issue.
---
 src/static/js/ace.js | 67 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 64 insertions(+), 3 deletions(-)

diff --git a/src/static/js/ace.js b/src/static/js/ace.js
index b0a04257..3be9c45a 100644
--- a/src/static/js/ace.js
+++ b/src/static/js/ace.js
@@ -24,6 +24,25 @@
 // requires: top
 // requires: undefined
 
+// SANDSTORM:
+// commit cb9f6d67768da5c87651c03bcc24e019574121aa, a fix for Safari, breaks
+// modern Firefox *on Sandstorm only* (not an upstream bug). It does not break
+// ESR Firefox, as of this writing.
+//
+// I don't understand what it does, so I can't take a selective approach. I
+// don't want to take the fully blunt approach of reverting it lest I undo an
+// apparent fix to Safari. So, I am taking a less blunt approach: going
+// through and undoing its effects only for Firefox. Experimentally, ESR
+// Firefox seems to be fine with this as well, which makes sense given that
+// the fix was for Safari.
+//
+// NOTE: I'm skipping many relevant comments in the above referenced commit.
+// Read the commit if you want to try to make more sense of this.
+//
+// Also, this seems like the same error. Maybe it points to a better fix:
+// https://github.com/ether/etherpad-lite/issues/4975
+const browser = require('./vendors/browser');
+
 const hooks = require('./pluginfw/hooks');
 const makeCSSManager = require('./cssmanager').makeCSSManager;
 const pluginUtils = require('./pluginfw/shared');
@@ -65,6 +84,21 @@ const eventFired = async (obj, event, cleanups = [], predicate = () => true) =>
   });
 };
 
+// SANDSTORM: see require('browser') above
+const pollCondition = async (predicate, cleanups, pollPeriod, timeout) => {
+  let done = false;
+  cleanups.push(() => { done = true; });
+  // Pause a tick to give the predicate a chance to become true before adding latency.
+  await new Promise((resolve) => setTimeout(resolve, 0));
+  const start = Date.now();
+  while (!done && !predicate()) {
+    if (Date.now() - start > timeout) throw new Error('timeout');
+    await new Promise((resolve) => setTimeout(resolve, pollPeriod));
+    debugLog('Ace2Editor.init() polling');
+  }
+  if (!done) debugLog('Ace2Editor.init() poll condition became true');
+};
+
 // Resolves when the frame's document is ready to be mutated. Browsers seem to be quirky about
 // iframe ready events so this function throws the kitchen sink at the problem. Maybe one day we'll
 // find a concise general solution.
@@ -74,13 +108,20 @@ const frameReady = async (frame) => {
   const doc = () => frame.contentDocument;
   const cleanups = [];
   try {
-    await Promise.race([
+    // SANDSTORM: see require('browser') above
+    let raceItems = ([
       eventFired(frame, 'load', cleanups),
       eventFired(frame.contentWindow, 'load', cleanups),
       eventFired(doc(), 'load', cleanups),
       eventFired(doc(), 'DOMContentLoaded', cleanups),
       eventFired(doc(), 'readystatechange', cleanups, () => doc.readyState === 'complete'),
     ]);
+    if (browser.firefox) {
+      raceItems.push(
+        pollCondition(() => doc().readyState === 'complete', cleanups, 10, 5000),
+      )
+    }
+    await Promise.race(raceItems);
   } finally {
     for (const cleanup of cleanups) cleanup();
   }
@@ -193,7 +234,10 @@ const Ace2Editor = function () {
     //   - Safari behaves like Chrome.
     // srcdoc is avoided because Firefox's Content Security Policy engine does not properly handle
     // 'self' with nested srcdoc iframes: https://bugzilla.mozilla.org/show_bug.cgi?id=1721296
-    outerFrame.src = '../static/empty.html';
+    // SANDSTORM: see require('browser') above
+    if (!browser.firefox) {
+      outerFrame.src = '../static/empty.html';
+    }
     info.frame = outerFrame;
     document.getElementById(containerId).appendChild(outerFrame);
     const outerWindow = outerFrame.contentWindow;
@@ -207,6 +251,13 @@ const Ace2Editor = function () {
     const outerDocument = outerWindow.document;
 
     // <html> tag
+
+    // SANDSTORM: see require('browser') above
+    if (browser.firefox) {
+      outerDocument.insertBefore(
+          outerDocument.implementation.createDocumentType('html', '', ''), outerDocument.firstChild);
+    }
+
     outerDocument.documentElement.classList.add('outer-editor', 'outerdoc', ...skinVariants);
 
     // <head> tag
@@ -240,7 +291,10 @@ const Ace2Editor = function () {
     innerFrame.allowTransparency = true; // for IE
     // The iframe MUST have a src or srcdoc property to avoid browser quirks. See the comment above
     // outerFrame.srcdoc.
-    innerFrame.src = 'empty.html';
+    // SANDSTORM: see require('browser') above
+    if (!browser.firefox) {
+      innerFrame.src = 'empty.html';
+    }
     outerDocument.body.insertBefore(innerFrame, outerDocument.body.firstChild);
     const innerWindow = innerFrame.contentWindow;
 
@@ -253,6 +307,13 @@ const Ace2Editor = function () {
     const innerDocument = innerWindow.document;
 
     // <html> tag
+
+    // SANDSTORM: see require('browser') above
+    if (browser.firefox) {
+      innerDocument.insertBefore(
+          innerDocument.implementation.createDocumentType('html', '', ''), innerDocument.firstChild);
+    }
+
     innerDocument.documentElement.classList.add('inner-editor', ...skinVariants);
 
     // <head> tag
-- 
2.30.2

