From 2e2abbf02f852053eb167e31714d53762f4285d7 Mon Sep 17 00:00:00 2001
From: Daniel Krol <orblivion@gmail.com>
Date: Sun, 3 Oct 2021 21:28:29 -0400
Subject: [PATCH 03/25] perf: Don't use npm to find plugin list

This improves startup time substantially.
---
 src/bin/run.sh                    |  3 +++
 src/static/js/pluginfw/plugins.js | 40 ++++++++++++++++++-------------
 2 files changed, 27 insertions(+), 16 deletions(-)

diff --git a/src/bin/run.sh b/src/bin/run.sh
index d36d2c68..ba6d15f5 100755
--- a/src/bin/run.sh
+++ b/src/bin/run.sh
@@ -29,6 +29,9 @@ fi
 # Prepare the environment
 #src/bin/installDeps.sh "$@" || exit 1
 
+# TODO - do this like Kenton does, eventually
+mkdir -p cache
+
 # Move to the node folder and start
 log "Starting Etherpad..."
 
diff --git a/src/static/js/pluginfw/plugins.js b/src/static/js/pluginfw/plugins.js
index 74fbbafc..97d5bfe2 100644
--- a/src/static/js/pluginfw/plugins.js
+++ b/src/static/js/pluginfw/plugins.js
@@ -115,22 +115,30 @@ exports.update = async () => {
 };
 
 exports.getPackages = async () => {
-  logger.info('Running npm to get a list of installed plugins...');
-  // Notes:
-  //   * Do not pass `--prod` otherwise `npm ls` will fail if there is no `package.json`.
-  //   * The `--no-production` flag is required (or the `NODE_ENV` environment variable must be
-  //     unset or set to `development`) because otherwise `npm ls` will not mention any packages
-  //     that are not included in `package.json` (which is expected to not exist).
-  const cmd = ['npm', 'ls', '--long', '--json', '--depth=0', '--no-production'];
-  const {dependencies = {}} = JSON.parse(await runCmd(cmd, {stdio: [null, 'string']}));
-  await Promise.all(Object.entries(dependencies).map(async ([pkg, info]) => {
-    if (!pkg.startsWith(exports.prefix)) {
-      delete dependencies[pkg];
-      return;
-    }
-    info.realPath = await fs.realpath(info.path);
-  }));
-  return dependencies;
+  // SANDSTORM EDIT - Don't query npm at runtime (takes a few seconds) when
+  // running inside SANDSTORM. Do it during the pre-run and caceh the results.
+  if (process.env.SANDSTORM) {
+    return JSON.parse(await fs.readFile('cache/plugin-dependencies-obj'))
+  } else {
+    logger.info('Running npm to get a list of installed plugins...');
+    // Notes:
+    //   * Do not pass `--prod` otherwise `npm ls` will fail if there is no `package.json`.
+    //   * The `--no-production` flag is required (or the `NODE_ENV` environment variable must be
+    //     unset or set to `development`) because otherwise `npm ls` will not mention any packages
+    //     that are not included in `package.json` (which is expected to not exist).
+    const cmd = ['npm', 'ls', '--long', '--json', '--depth=0', '--no-production'];
+    const {dependencies = {}} = JSON.parse(await runCmd(cmd, {stdio: [null, 'string']}));
+    await Promise.all(Object.entries(dependencies).map(async ([pkg, info]) => {
+      if (!pkg.startsWith(exports.prefix)) {
+        delete dependencies[pkg];
+        return;
+      }
+      info.realPath = await fs.realpath(info.path);
+    }));
+
+    await fs.writeFile('cache/plugin-dependencies-obj', JSON.stringify(dependencies));
+    return dependencies
+  }
 };
 
 const loadPlugin = async (packages, pluginName, plugins, parts) => {
-- 
2.20.1

