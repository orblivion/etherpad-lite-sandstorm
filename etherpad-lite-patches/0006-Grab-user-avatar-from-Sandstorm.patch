From 5bd1cea6f53d552213cc6ff25ac62518242a4d89 Mon Sep 17 00:00:00 2001
From: Daniel Krol <orblivion@gmail.com>
Date: Wed, 27 Oct 2021 19:54:00 -0400
Subject: [PATCH 06/20] Grab user avatar from Sandstorm

---
 src/node/db/AuthorManager.js          | 16 ++++++++++++++++
 src/node/handler/PadMessageHandler.js | 22 +++++++++++++++++++++-
 src/static/js/pad.js                  |  1 +
 3 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/src/node/db/AuthorManager.js b/src/node/db/AuthorManager.js
index 2a354d42..a146fe5f 100644
--- a/src/node/db/AuthorManager.js
+++ b/src/node/db/AuthorManager.js
@@ -213,6 +213,22 @@ exports.getAuthorName = async (author) => await db.getSub(`globalAuthor:${author
 exports.setAuthorName = async (author, name) => await db.setSub(
     `globalAuthor:${author}`, ['name'], name);
 
+// SANDSTORM EDIT
+/**
+ * Returns the avatar URL of the author.
+ * @param {String} author The id of the author
+ */
+exports.getAuthorAvatarUrl = async (author) => await db.getSub(`globalAuthor:${author}`, ["avatarUrl"]);
+
+/**
+ * Sets the avatar URL of the author
+ * @param {String} author The id of the author
+ * @param {String} avatarUrl The URL of the user's avatar.
+ */
+exports.setAuthorAvatarUrl = async (author, avatarUrl) => await db.setSub(
+  `globalAuthor:${author}`, ["avatarUrl"], avatarUrl);
+// END SANDSTORM EDIT
+
 /**
  * Returns an array of all pads this author contributed to
  * @param {String} author The id of the author
diff --git a/src/node/handler/PadMessageHandler.js b/src/node/handler/PadMessageHandler.js
index a223ea3f..d85779f2 100644
--- a/src/node/handler/PadMessageHandler.js
+++ b/src/node/handler/PadMessageHandler.js
@@ -172,6 +172,7 @@ exports.handleDisconnect = async (socket) => {
                     ` authorID:${session.author}` +
                     (user && user.username ? ` username:${user.username}` : ''));
   /* eslint-enable prefer-template */
+  const author = await authorManager.getAuthor(session.author);
   socket.broadcast.to(session.padId).json.send({
     type: 'COLLABROOM',
     data: {
@@ -179,6 +180,7 @@ exports.handleDisconnect = async (socket) => {
       userInfo: {
         colorId: await authorManager.getAuthorColorId(session.author),
         userId: session.author,
+        avatarUrl: author.avatarUrl,
       },
     },
   });
@@ -529,6 +531,8 @@ const handleUserInfoUpdate = async (socket, message) => {
 
   const padId = session.padId;
 
+  const authorAvatarUrl = await authorManager.getAuthorAvatarUrl(author);
+
   const infoMsg = {
     type: 'COLLABROOM',
     data: {
@@ -536,6 +540,7 @@ const handleUserInfoUpdate = async (socket, message) => {
       type: 'USER_NEWINFO',
       userInfo: {
         userId: author,
+        avatarUrl: authorAvatarUrl || null,
         // set a null name, when there is no name set. cause the client wants it null
         name: message.data.userInfo.name || null,
         colorId: message.data.userInfo.colorId,
@@ -828,6 +833,14 @@ const handleClientReady = async (socket, message) => {
   if (!authorName) {
     authorName = decodeURIComponent(socket.client.request.headers["x-sandstorm-username"]);
   }
+
+  authorAvatarUrl = socket.client.request.headers['x-sandstorm-user-picture'] || null;
+  if (authorAvatarUrl) {
+    authorAvatarUrl = decodeURIComponent(authorAvatarUrl);
+    if (value.avatarUrl !== authorAvatarUrl) {
+      authorManager.setAuthorAvatarUrl(author, authorAvatarUrl);
+    }
+  }
   // END SANDSTORM EDIT
 
   if (authorColorId && !/^#(?:[0-9A-F]{3}){1,2}$/i.test(authorColorId)) {
@@ -858,7 +871,11 @@ const handleClientReady = async (socket, message) => {
           'This is possibly related to https://github.com/ether/etherpad-lite/issues/2802');
     } else {
       // Filter author attribs (e.g. don't send author's pads to all clients)
-      historicalAuthorData[authorId] = {name: author.name, colorId: author.colorId};
+      historicalAuthorData[authorId] = {
+        name: author.name,
+        colorId: author.colorId,
+        avatarUrl: author.avatarUrl || null, // SANDSTORM EDIT
+      };
     }
   }));
 
@@ -996,6 +1013,7 @@ const handleClientReady = async (socket, message) => {
       colorPalette: authorManager.getColorPalette(),
       clientIp: '127.0.0.1',
       userColor: authorColorId,
+      userAvatarUrl: authorAvatarUrl, // SANDSTORM EDIT
       padId: sessionInfo.auth.padID,
       padOptions: settings.padOptions,
       padShortcutEnabled: settings.padShortcutEnabled,
@@ -1065,6 +1083,7 @@ const handleClientReady = async (socket, message) => {
         colorId: authorColorId,
         name: authorName,
         userId: sessionInfo.author,
+        avatarUrl: authorAvatarUrl
       },
     },
   });
@@ -1103,6 +1122,7 @@ const handleClientReady = async (socket, message) => {
           colorId: authorInfo.colorId,
           name: authorInfo.name,
           userId: authorId,
+          avatarUrl: authorInfo.avatarUrl,
         },
       },
     };
diff --git a/src/static/js/pad.js b/src/static/js/pad.js
index 306c2b19..233b3f27 100644
--- a/src/static/js/pad.js
+++ b/src/static/js/pad.js
@@ -402,6 +402,7 @@ const pad = {
       name: clientVars.userName,
       ip: pad.getClientIp(),
       colorId: clientVars.userColor,
+      avatarUrl: clientVars.userAvatarUrl,
     };
 
     const postAceInit = () => {
-- 
2.39.0

