From 5cc2ff1dca4e5846143ccb22516237ad79dfef14 Mon Sep 17 00:00:00 2001
From: Daniel Krol <orblivion@gmail.com>
Date: Tue, 18 Jan 2022 12:11:57 -0500
Subject: [PATCH 26/26] Cache plugins dependency info blob during build.sh

TODO - combine me with the other commit on plugins.js
---
 src/node/cachePluginDependenciesObj.js |  8 +++++
 src/static/js/pluginfw/plugins.js      | 48 +++++++++++++-------------
 2 files changed, 32 insertions(+), 24 deletions(-)
 create mode 100644 src/node/cachePluginDependenciesObj.js

diff --git a/src/node/cachePluginDependenciesObj.js b/src/node/cachePluginDependenciesObj.js
new file mode 100644
index 00000000..e322bfd4
--- /dev/null
+++ b/src/node/cachePluginDependenciesObj.js
@@ -0,0 +1,8 @@
+#!/usr/bin/env node
+
+'use strict';
+
+// SANDSTORM - put the plugin list into cache/ during build.sh so it can be
+// part of the spk
+
+require('../static/js/pluginfw/plugins').cachePackages()
diff --git a/src/static/js/pluginfw/plugins.js b/src/static/js/pluginfw/plugins.js
index 97d5bfe2..7807dbcf 100644
--- a/src/static/js/pluginfw/plugins.js
+++ b/src/static/js/pluginfw/plugins.js
@@ -114,33 +114,33 @@ exports.update = async () => {
   await callInit();
 };
 
-exports.getPackages = async () => {
-  // SANDSTORM EDIT - Don't query npm at runtime (takes a few seconds) when
-  // running inside SANDSTORM. Do it during the pre-run and caceh the results.
-  if (process.env.SANDSTORM) {
-    return JSON.parse(await fs.readFile('cache/plugin-dependencies-obj'))
-  } else {
-    logger.info('Running npm to get a list of installed plugins...');
-    // Notes:
-    //   * Do not pass `--prod` otherwise `npm ls` will fail if there is no `package.json`.
-    //   * The `--no-production` flag is required (or the `NODE_ENV` environment variable must be
-    //     unset or set to `development`) because otherwise `npm ls` will not mention any packages
-    //     that are not included in `package.json` (which is expected to not exist).
-    const cmd = ['npm', 'ls', '--long', '--json', '--depth=0', '--no-production'];
-    const {dependencies = {}} = JSON.parse(await runCmd(cmd, {stdio: [null, 'string']}));
-    await Promise.all(Object.entries(dependencies).map(async ([pkg, info]) => {
-      if (!pkg.startsWith(exports.prefix)) {
-        delete dependencies[pkg];
-        return;
-      }
-      info.realPath = await fs.realpath(info.path);
-    }));
+// SANDSTORM: Called during build.sh
+exports.cachePackages = async () => {
+  logger.info('Running npm to get a list of installed plugins...');
+  // Notes:
+  //   * Do not pass `--prod` otherwise `npm ls` will fail if there is no `package.json`.
+  //   * The `--no-production` flag is required (or the `NODE_ENV` environment variable must be
+  //     unset or set to `development`) because otherwise `npm ls` will not mention any packages
+  //     that are not included in `package.json` (which is expected to not exist).
+  const cmd = ['npm', 'ls', '--long', '--json', '--depth=0', '--no-production'];
+  const {dependencies = {}} = JSON.parse(await runCmd(cmd, {stdio: [null, 'string']}));
+  await Promise.all(Object.entries(dependencies).map(async ([pkg, info]) => {
+    if (!pkg.startsWith(exports.prefix)) {
+      delete dependencies[pkg];
+      return;
+    }
+    info.realPath = await fs.realpath(info.path);
+  }));
 
-    await fs.writeFile('cache/plugin-dependencies-obj', JSON.stringify(dependencies));
-    return dependencies
-  }
+  await fs.writeFile('cache/plugin-dependencies-obj', JSON.stringify(dependencies));
 };
 
+exports.getPackages = async () => {
+  // SANDSTORM EDIT - Don't query npm at runtime (takes a few seconds) when
+  // running inside SANDSTORM. Do it during build and cache the results.
+  return JSON.parse(await fs.readFile('cache/plugin-dependencies-obj'))
+}
+
 const loadPlugin = async (packages, pluginName, plugins, parts) => {
   const pluginPath = path.resolve(packages[pluginName].path, 'ep.json');
   try {
-- 
2.20.1

